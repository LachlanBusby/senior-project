""" Defining the CFG for the Parse Tree """

/* Constant Pre-Terminals
 * -----------------------
 * Hard-coded to only recognize the specified strings.
 */
Comma -> ','
Open_Paren -> '('
Close_Paren -> ')'
Colon -> ':'

Assign_Op -> '='
Bin_Op -> '+' | '-' | '*' | '/' | '%'

Return_Keyword -> 'return'
For_Keyword -> 'for'
Increment_Keyword -> 'to'
Decrement_Keyword -> 'downto'
Change_Keyword -> 'by'

/* Trainable Pre-Terminals
 * ------------------------
 * Potential values for these will be defined during training.
 */
Name -> any string
Func_Name -> any string (formatting requirements)

/* Program Root
 * -----------------
 * This will always be the top level node for any parse tree.
 */
PROGRAM -> STMT_LIST


// Statements

STMT_LIST -> STMT STMT_LIST
		     | STMT

STMT -> FUNC_DEF 
		| RETURN
		| ASSIGN
		| AUG_ASSIGN
		| FOR
		| FOREACH
		| WHILE
		| IF
		| EXPR_STMT
		| BREAK
		| CONTINUE

/* Function Header Statement
 * --------------------------
 * Supported Formats:
 * 		CLRS: ADD-TWO-NUMBERS(A, B) or FIZZ-BUZZ()
 *		No Args: PRINT-TO-TEN
 */
FUNC_DEF -> Func_Name ARG_LIST 
			| Func_Name
FUNC_ARG_LIST -> Open_Paren ARG_LIST Close_Paren 
				 | Open_Paren Close_Paren
ARG_LIST -> ARG Comma ARG_LIST 
			| ARG
ARG -> Name


/* Return Statement
 * -----------------
 * Supported Formats:
 * 		CLRS: 'return [expr]' or 'return'
 */
RETURN -> Return_Keyword EXPR 
		  | Return_Keyword


/* Assign Statement
 * -----------------
 * Supported Formats:
 * 		CLRS: 'a = [expr]'
 */
ASSIGN -> ASSIGN_TARGET Assign_Op ASSIGN_VALUE
ASSIGN_TARGET -> EXPR
ASSIGN_VALUE -> EXPR


/* Augmented Assign Statement
 * ---------------------------
 * Supported Formats:
 * 		any binary operation: 'a += 1' or 'a *= 2'
 */
AUG_ASSIGN -> ASSIGN_TARGET Bin_Op Assign_Op ASSIGN_VALUE


/* For Statement
 * --------------
 * Supported Formats:
 * 		CLRS: 'for [assign] to [value]' or 
 *			  'for [assign] downto [value]' or 
 *			  'for [assign] to [value] by 2'
 * Converting to AST:
 * 		will need to write method to convert into 3 statements
 *		identify type of condition based on increment/decrement
 *		if for condition isn't ASSIGN, then compare ASSIGN_TARGET of FOR_START to value
 */
 FOR -> FOR_STANDARD | FOR_STANDARD FOR_CHANGE
 FOR_STANDARD -> For_Keyword FOR_START FOR_OPERATION FOR_CONDITION
 FOR_START -> STMT
 FOR_OPERATION -> Increment_Keyword | Decrement_Keyword
 FOR_CONDITION -> STMT
 FOR_CHANGE -> Change_Keyword STMT

 /* Foreach Statement
  * ------------------
  */

 /* While Statement
  * ------------------
  */

 /* If Statement
  * ------------------
  */

 /* ExprStmt Statement
  * ------------------
  */

 /* Break Statement
  * ------------------
  */

 /* Continue Statement
  * ------------------
  */

